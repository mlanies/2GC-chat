import React, { useState } from 'react';
import { AuthMessage } from '../../shared';
import { encryptWithAES, importKey, hashPassword } from '../utils/security';

interface LoginFormProps {
  onLogin: (password: string) => void;
  authError: string;
  isLoading: boolean;
  publicKey: string;
  keyExpiresAt: number;
}

export function LoginForm({ 
  onLogin, 
  authError, 
  isLoading,
  publicKey,
  keyExpiresAt
}: LoginFormProps) {
  const [password, setPassword] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (password.trim()) {
      try {
        // 1. –°–Ω–∞—á–∞–ª–∞ —Ö–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ (–∑–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –≤ –ø–∞–º—è—Ç–∏)
        const clientHashedPassword = await hashPassword(password);
        
        // 2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        const key = await importKey(publicKey);
        
        // 3. –®–∏—Ñ—Ä—É–µ–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        const encryptedPassword = await encryptWithAES(clientHashedPassword, key);
        
        onLogin(encryptedPassword);
      } catch (error) {
        console.error('Security error:', error);
        // Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –∫–∞–∫ –µ—Å—Ç—å (–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ, –Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        onLogin(password);
      }
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞
  const isKeyValid = (expiresAt: number): boolean => {
    return Date.now() < expiresAt;
  };

  return (
    <div className="login-container">
      <div className="login-form">
        <h2>–í—Ö–æ–¥ –≤ —á–∞—Ç</h2>
        <p>–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ–∫—Ä–µ—Ç–Ω–æ–º—É —á–∞—Ç—É</p>
        <div className="security-info">
          <small>üîí –ü–∞—Ä–æ–ª—å —Ö–µ—à–∏—Ä—É–µ—Ç—Å—è –∏ —à–∏—Ñ—Ä—É–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π</small>
        </div>
        
        <form onSubmit={handleSubmit}>
          <input
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            placeholder="–ü–∞—Ä–æ–ª—å"
            required
            disabled={isLoading}
            maxLength={100}
            autoComplete="current-password"
          />
          
          <button type="submit" disabled={isLoading || !isKeyValid(keyExpiresAt)}>
            {isLoading ? '–í—Ö–æ–¥–∏–º...' : '–í–æ–π—Ç–∏'}
          </button>
        </form>
        
        {authError && (
          <div className="error-message">
            {authError}
          </div>
        )}
        
        {!isKeyValid(keyExpiresAt) && (
          <div className="warning-message">
            –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–µ–∫. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.
          </div>
        )}
        
        <div className="security-details">
          <details>
            <summary>üõ°Ô∏è –î–µ—Ç–∞–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</summary>
            <ul>
              <li>‚úÖ PBKDF2 —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ (100,000 –∏—Ç–µ—Ä–∞—Ü–∏–π)</li>
              <li>‚úÖ AES-GCM —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏</li>
              <li>‚úÖ HTTPS –∑–∞—â–∏—â–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</li>
              <li>‚úÖ –†–æ—Ç–∞—Ü–∏—è –∫–ª—é—á–µ–π –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞</li>
            </ul>
          </details>
        </div>
      </div>
    </div>
  );
}
